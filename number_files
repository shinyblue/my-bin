#!/bin/bash
# modified 2006-06-09: removed serious bug which meant that if you didn't include a number
#                      it would move all files on top of eachother, leaving only the last!
#                      Now it will never overwrite an existing file.

if [ $# -lt 2 ]
then	echo ""
		echo "Usage: $0 <pattern> <file> [ <file> ]..."
		echo "       Where <pattern> can include %f for original filename (before .extention)"
		echo "       and %F for filename with numbers at the start of the filename removed"
		echo "       and %n for number. The numbers will be zero padded, using as few zeros"
		echo "       as possible (ie. rename 90 files and you get 01-90, rename 101 and you get 001 to 101)"
		echo ""
fi

if   [ $# -gt 9999 ]; then pad=4
elif [ $# -gt 999  ]; then pad=3
elif [ $# -gt 99   ]; then pad=2
elif [ $# -gt 9    ]; then pad=1
else pad=0
fi


pattern=$1
shift
files=( "$@" )

for f in $(seq 1 $#)
do
	# pad file number with a zero
	[ $pad -gt 3 -a $f -lt 10000 ] && f="0$f"
	[ $pad -gt 2 -a $f -lt 1000  ] && f="0$f"
	[ $pad -gt 1 -a $f -lt 100   ] && f="0$f"
	[ $pad -gt 0 -a $f -lt 10    ] && f="0$f"
	
	# remove path, so tmp is just the filename
	filename=${1##*/}
	# get extention from filename
	extention=${filename##*.}
	if [ "$extention" != "$filename" ] 
	then
		extention=".$extention" 
		filename=${filename%"$extention"} # remove extention
	else
		extention=""
	fi

	# pattern can have %n for number and %f for original filename
	# or %F for original filename with number at start removed.
	tmp=${pattern//'%n'/$f};
	tmp=${tmp//'%f'/"$filename"};	

	filenameunnumbered=${filename:$( expr "$filename" : '[0-9]*' )};
	tmp=${tmp//'%F'/"$filenameunnumbered"};	
	
	if [ ! -e "$tmp$extention" ] 
	then 
		echo "$f renaming: \"$1\" to \"$tmp$extention\""
		mv "$1" "$tmp$extention" 
	else
		i=0
		while [ -e "${tmp}_$i$extention" ] ; do i=$(($i+1)) ; done
		echo "$f renaming: \"$1\" to \"${tmp}_$i$extention\" because \"$tmp$extention\" already existed!" >&2
		mv "$1" "${tmp}_$i$extention" 
	fi
	shift
done

